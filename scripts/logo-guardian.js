#!/usr/bin/env node

/**
 * üé® LOGO GUARDIAN AGENT
 *
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ HypeAI
 * –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞.
 *
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –≤–µ—Ä—Å–∏—è–º
 * - –ù–∞—Ö–æ–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤
 * - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç—ã –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
 * - –ú–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
 * - –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (24/7)
 *
 * Usage:
 *   node logo-guardian.js --scan      # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
 *   node logo-guardian.js --fix       # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
 *   node logo-guardian.js --watch     # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 *   node logo-guardian.js --report    # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  projectRoot: path.join(__dirname, '..'),
  reportPath: path.join(__dirname, '..', 'data', 'project-coordination', 'logo-compliance-report.json'),

  // ‚úÖ –£–¢–í–ï–†–ñ–î–Å–ù–ù–´–ï –ª–æ–≥–æ—Ç–∏–ø—ã (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û —ç—Ç–∏)
  approvedLogos: [
    'logo-official.svg',          // –ü–æ–ª–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø —Å —Ç–µ–∫—Å—Ç–æ–º
    'logo-icon-only.svg',         // –¢–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∞
    'logo-premium-animated.html'  // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
  ],

  // üö´ –ó–ê–ü–†–ï–©–Å–ù–ù–´–ï –ª–æ–≥–æ—Ç–∏–ø—ã (—Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏)
  deprecatedLogos: [
    'logo-hypeai.svg',                    // –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å infinity
    'logo-hypeai-compact.svg',            // –°—Ç–∞—Ä–∞—è –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
    'logo-hypeai-lightning.svg',          // –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–ª–Ω–∏—è–º–∏
    'logo-brain-lightning.html',          // –û—Ç–∫–ª–æ–Ω–µ–Ω–æ - "–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥"
    'logo-animated.html',                 // –°—Ç–∞—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    'logo-premium-lightning.svg',         // –ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è (–∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ official)
    'logo-ultra-premium.svg'              // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–µ –≤—ã–±—Ä–∞–Ω–∞)
  ],

  // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  scanDirs: [
    'website',
    'public',
    'docs',
    'src',
    'scripts',
    'data'
  ],

  // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  fileExtensions: ['.html', '.md', '.json', '.js', '.jsx', '.tsx', '.css', '.svg'],

  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã)
  excludePaths: [
    'node_modules',
    '.git',
    'dist',
    'build',
    '.next',
    'logo-guardian.js',  // –°–∞–º —Å–∫—Ä–∏–ø—Ç
    'logo-compliance-report.json'  // –û—Ç—á—ë—Ç
  ]
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ö–ª–∞—Å—Å Logo Guardian Agent
class LogoGuardian {
  constructor() {
    this.violations = [];
    this.compliantFiles = [];
    this.scannedFiles = 0;
    this.startTime = Date.now();
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async scan() {
    log('\nüé® LOGO GUARDIAN AGENT - Starting scan...', 'cyan');
    log(`üìÅ Project root: ${CONFIG.projectRoot}`, 'blue');
    log(`‚úÖ Approved logos: ${CONFIG.approvedLogos.join(', ')}`, 'green');
    log(`üö´ Deprecated logos: ${CONFIG.deprecatedLogos.join(', ')}`, 'red');
    log('');

    for (const dir of CONFIG.scanDirs) {
      const fullPath = path.join(CONFIG.projectRoot, dir);
      if (fs.existsSync(fullPath)) {
        await this.scanDirectory(fullPath);
      }
    }

    const elapsed = ((Date.now() - this.startTime) / 1000).toFixed(2);
    log(`\n‚úÖ Scan completed in ${elapsed}s`, 'green');
    log(`üìä Files scanned: ${this.scannedFiles}`, 'blue');
    log(`‚úÖ Compliant files: ${this.compliantFiles.length}`, 'green');
    log(`üö´ Violations found: ${this.violations.length}`, this.violations.length > 0 ? 'red' : 'green');

    return this.generateReport();
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  async scanDirectory(dirPath) {
    const entries = fs.readdirSync(dirPath, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);
      const relativePath = path.relative(CONFIG.projectRoot, fullPath);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
      if (CONFIG.excludePaths.some(exclude => relativePath.includes(exclude))) {
        continue;
      }

      if (entry.isDirectory()) {
        await this.scanDirectory(fullPath);
      } else if (entry.isFile()) {
        const ext = path.extname(entry.name);
        if (CONFIG.fileExtensions.includes(ext)) {
          await this.scanFile(fullPath);
        }
      }
    }
  }

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  async scanFile(filePath) {
    this.scannedFiles++;

    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const relativePath = path.relative(CONFIG.projectRoot, filePath);

      const violations = this.checkContent(content, filePath);

      if (violations.length > 0) {
        this.violations.push({
          file: relativePath,
          violations: violations,
          timestamp: new Date().toISOString()
        });

        log(`üö´ ${relativePath}`, 'red');
        violations.forEach(v => {
          log(`   Line ${v.line}: ${v.type} - "${v.match}"`, 'yellow');
        });
      } else if (this.hasLogoReferences(content)) {
        this.compliantFiles.push(relativePath);
        log(`‚úÖ ${relativePath}`, 'green');
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
  checkContent(content, filePath) {
    const violations = [];
    const lines = content.split('\n');

    lines.forEach((line, index) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤
      CONFIG.deprecatedLogos.forEach(deprecatedLogo => {
        if (line.includes(deprecatedLogo)) {
          violations.push({
            line: index + 1,
            type: 'DEPRECATED_LOGO',
            match: deprecatedLogo,
            suggestion: this.getSuggestion(deprecatedLogo)
          });
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
      if (line.includes('‚àû') && !filePath.includes('OFFICIAL_LOGO.md')) {
        violations.push({
          line: index + 1,
          type: 'OLD_SYMBOL',
          match: '‚àû',
          suggestion: 'Replace with ‚ö° (lightning bolt)'
        });
      }
    });

    return violations;
  }

  // –ï—Å—Ç—å –ª–∏ –≤ —Ñ–∞–π–ª–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø—ã
  hasLogoReferences(content) {
    return CONFIG.approvedLogos.some(logo => content.includes(logo));
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –∑–∞–º–µ–Ω–µ
  getSuggestion(deprecatedLogo) {
    const suggestions = {
      'logo-hypeai.svg': 'logo-official.svg',
      'logo-hypeai-compact.svg': 'logo-icon-only.svg',
      'logo-hypeai-lightning.svg': 'logo-official.svg',
      'logo-brain-lightning.html': 'logo-premium-animated.html',
      'logo-animated.html': 'logo-premium-animated.html',
      'logo-premium-lightning.svg': 'logo-official.svg',
      'logo-ultra-premium.svg': 'logo-official.svg'
    };
    return suggestions[deprecatedLogo] || 'logo-official.svg';
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
  generateReport() {
    const report = {
      timestamp: new Date().toISOString(),
      scan: {
        duration: ((Date.now() - this.startTime) / 1000).toFixed(2) + 's',
        filesScanned: this.scannedFiles,
        compliantFiles: this.compliantFiles.length,
        violationsFound: this.violations.length
      },
      status: this.violations.length === 0 ? 'COMPLIANT' : 'VIOLATIONS_FOUND',
      compliance: {
        score: Math.round((this.compliantFiles.length / (this.compliantFiles.length + this.violations.length)) * 100) || 100,
        approved: CONFIG.approvedLogos,
        deprecated: CONFIG.deprecatedLogos
      },
      violations: this.violations,
      compliantFiles: this.compliantFiles,
      recommendations: this.getRecommendations()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    fs.writeFileSync(CONFIG.reportPath, JSON.stringify(report, null, 2));
    log(`\nüìä Report saved to: ${CONFIG.reportPath}`, 'blue');

    return report;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  getRecommendations() {
    const recommendations = [];

    if (this.violations.length > 0) {
      recommendations.push({
        priority: 'HIGH',
        action: 'Run auto-fix to replace deprecated logos',
        command: 'node scripts/logo-guardian.js --fix'
      });

      recommendations.push({
        priority: 'MEDIUM',
        action: 'Review violations manually',
        command: 'node scripts/logo-guardian.js --report'
      });
    }

    if (this.violations.length === 0) {
      recommendations.push({
        priority: 'LOW',
        action: 'Enable continuous monitoring',
        command: 'node scripts/logo-guardian.js --watch'
      });
    }

    return recommendations;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  async autoFix() {
    log('\nüîß LOGO GUARDIAN - Auto-fixing violations...', 'cyan');

    let fixedFiles = 0;
    let fixedViolations = 0;

    for (const violation of this.violations) {
      const filePath = path.join(CONFIG.projectRoot, violation.file);

      try {
        let content = fs.readFileSync(filePath, 'utf-8');
        let modified = false;

        violation.violations.forEach(v => {
          if (v.type === 'DEPRECATED_LOGO') {
            const oldLogo = v.match;
            const newLogo = v.suggestion;

            if (content.includes(oldLogo)) {
              content = content.replace(new RegExp(oldLogo, 'g'), newLogo);
              modified = true;
              fixedViolations++;
              log(`‚úÖ ${violation.file}: ${oldLogo} ‚Üí ${newLogo}`, 'green');
            }
          }

          if (v.type === 'OLD_SYMBOL' && v.match === '‚àû') {
            content = content.replace(/‚àû/g, '‚ö°');
            modified = true;
            fixedViolations++;
            log(`‚úÖ ${violation.file}: ‚àû ‚Üí ‚ö°`, 'green');
          }
        });

        if (modified) {
          fs.writeFileSync(filePath, content, 'utf-8');
          fixedFiles++;
        }
      } catch (error) {
        log(`‚ùå Error fixing ${violation.file}: ${error.message}`, 'red');
      }
    }

    log(`\n‚úÖ Auto-fix completed`, 'green');
    log(`üìÅ Files fixed: ${fixedFiles}`, 'blue');
    log(`üîß Violations fixed: ${fixedViolations}`, 'blue');

    // –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    log('\nüîÑ Re-scanning project...', 'cyan');
    this.violations = [];
    this.compliantFiles = [];
    this.scannedFiles = 0;
    this.startTime = Date.now();

    return await this.scan();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç
  showReport() {
    if (!fs.existsSync(CONFIG.reportPath)) {
      log('‚ùå No report found. Run scan first: node logo-guardian.js --scan', 'red');
      return;
    }

    const report = JSON.parse(fs.readFileSync(CONFIG.reportPath, 'utf-8'));

    log('\nüìä LOGO COMPLIANCE REPORT', 'cyan');
    log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan');
    log(`\n‚è∞ Last scan: ${new Date(report.timestamp).toLocaleString()}`, 'blue');
    log(`‚ö° Duration: ${report.scan.duration}`, 'blue');
    log(`üìÅ Files scanned: ${report.scan.filesScanned}`, 'blue');
    log(`\nüéØ Status: ${report.status}`, report.status === 'COMPLIANT' ? 'green' : 'yellow');
    log(`üìä Compliance score: ${report.compliance.score}%`, report.compliance.score === 100 ? 'green' : 'yellow');
    log(`\n‚úÖ Compliant files: ${report.scan.compliantFiles}`, 'green');
    log(`üö´ Violations: ${report.scan.violationsFound}`, report.scan.violationsFound === 0 ? 'green' : 'red');

    if (report.violations.length > 0) {
      log('\nüö´ VIOLATIONS:', 'red');
      report.violations.forEach(v => {
        log(`\n  üìÑ ${v.file}`, 'yellow');
        v.violations.forEach(vio => {
          log(`     Line ${vio.line}: ${vio.type} - "${vio.match}"`, 'red');
          log(`     Suggestion: ${vio.suggestion}`, 'green');
        });
      });
    }

    if (report.recommendations.length > 0) {
      log('\nüí° RECOMMENDATIONS:', 'cyan');
      report.recommendations.forEach(rec => {
        log(`\n  [${rec.priority}] ${rec.action}`, 'yellow');
        log(`  Command: ${rec.command}`, 'blue');
      });
    }

    log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', 'cyan');
  }

  // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (watch mode)
  async watch() {
    log('üëÅÔ∏è  LOGO GUARDIAN - Watch mode enabled', 'cyan');
    log('Monitoring project for logo changes...', 'blue');
    log('Press Ctrl+C to stop\n', 'yellow');

    // –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await this.scan();

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    setInterval(async () => {
      log('\nüîÑ Running periodic scan...', 'cyan');
      this.violations = [];
      this.compliantFiles = [];
      this.scannedFiles = 0;
      this.startTime = Date.now();
      await this.scan();
    }, 60000);
  }
}

// CLI
async function main() {
  const args = process.argv.slice(2);
  const guardian = new LogoGuardian();

  if (args.includes('--scan')) {
    await guardian.scan();
  } else if (args.includes('--fix')) {
    await guardian.scan();
    if (guardian.violations.length > 0) {
      await guardian.autoFix();
    } else {
      log('‚úÖ No violations found. Project is compliant!', 'green');
    }
  } else if (args.includes('--report')) {
    guardian.showReport();
  } else if (args.includes('--watch')) {
    await guardian.watch();
  } else {
    log('\nüé® LOGO GUARDIAN AGENT', 'cyan');
    log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'cyan');
    log('\nUsage:', 'blue');
    log('  node logo-guardian.js --scan      # Scan project for logo compliance', 'yellow');
    log('  node logo-guardian.js --fix       # Auto-fix violations', 'yellow');
    log('  node logo-guardian.js --report    # Show compliance report', 'yellow');
    log('  node logo-guardian.js --watch     # Continuous monitoring', 'yellow');
    log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', 'cyan');
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(error => {
    log(`‚ùå Error: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = LogoGuardian;
