name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.10'

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Hardhat dependencies
        run: |
          cd contracts
          npm ci

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run Solhint
        run: |
          cd contracts
          npx solhint 'contracts/**/*.sol'

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run TypeScript compiler
        run: npm run typecheck

  smart-contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Compile contracts
        run: |
          cd contracts
          npx hardhat compile

      - name: Run contract tests
        run: |
          cd contracts
          npx hardhat test

      - name: Generate gas report
        run: |
          cd contracts
          REPORT_GAS=true npx hardhat test

      - name: Run contract coverage
        run: |
          cd contracts
          npx hardhat coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./contracts/coverage/lcov.info
          flags: smart-contracts
          name: contract-coverage

  backend-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: crypto_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:6
        ports:
          - 27017:27017

      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run backend tests
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: crypto_test
          TEST_DB_USER: test
          TEST_DB_PASSWORD: test
          TEST_MONGO_URL: mongodb://localhost:27017/crypto_test
          REDIS_URL: redis://localhost:6379
        run: npm run test:backend

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/backend/lcov.info
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run frontend tests
        run: npm run test:frontend -- --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/frontend/lcov.info
          flags: frontend
          name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [smart-contract-tests, backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: crypto_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Start local blockchain
        run: |
          npx hardhat node &
          sleep 10

      - name: Deploy contracts to local network
        run: |
          cd contracts
          npx hardhat run scripts/deploy.js --network localhost

      - name: Start backend server
        run: |
          npm run start:backend &
          sleep 15

      - name: Run integration tests
        env:
          TEST_DB_HOST: localhost
          BLOCKCHAIN_NETWORK: localhost
        run: npm run test:integration

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build frontend
        run: npm run build

      - name: Start services
        run: |
          npm run start:backend &
          npm run start:frontend &
          sleep 20

      - name: Run E2E tests
        run: npx playwright test

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Install Slither
        run: |
          pip3 install slither-analyzer
          pip3 install solc-select
          solc-select install 0.8.19
          solc-select use 0.8.19

      - name: Run Slither analysis
        run: |
          cd contracts
          slither . --json slither-report.json
        continue-on-error: true

      - name: Upload Slither report
        uses: actions/upload-artifact@v3
        with:
          name: slither-report
          path: contracts/slither-report.json

      - name: Run Mythril analysis
        run: |
          pip3 install mythril
          cd contracts
          myth analyze contracts/*.sol --execution-timeout 300
        continue-on-error: true

      - name: OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Start services
        run: |
          npm run start:backend &
          sleep 15

      - name: Run load tests
        run: npm run test:load

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report/

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Build application
        run: npm run build

      - name: Deploy to staging
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "Deploying to staging..."
          # Add staging deployment commands

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production..."
          # Add production deployment commands

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [smart-contract-tests, backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v3

      - name: Merge coverage reports
        run: |
          npm run coverage:merge

      - name: Check coverage thresholds
        run: |
          npm run coverage:check

      - name: Upload combined coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: combined
          name: combined-coverage

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-deploy, coverage-report]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: CI/CD Pipeline Result - ${{ github.repository }}
          body: |
            Pipeline completed with status: ${{ job.status }}

            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          to: dev-team@example.com
          from: CI/CD Pipeline
