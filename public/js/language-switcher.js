/**
 * HypeAI Language Switcher
 * Professional i18n system for English/Russian
 * Agent: BABEL - Translation Specialist
 */

(function() {
    'use strict';

    // Embedded translations (to avoid CORS issues with file:// protocol)
    // COMPLETE translations for EN, RU, ZH - ALL sections covered!
    const TRANSLATIONS = {"en":{"nav":{"home":"Home","trade":"Trade","stake":"Stake","agents":"AI Agents","docs":"Docs","whitepaper":"Whitepaper","connectWallet":"Connect Wallet"},"hero":{"title":"AI-Powered Crypto Trading","subtitle":"Smarter. Faster. Better.","description":"27 AI Agents working infinitely to empower your financial growth","ctaPrimary":"Start Trading Now","ctaSecondary":"View AI Agents","whySuccessButton":"üöÄ Why 50x-100x-1000x is Inevitable"},"stats":{"agents":"AI Agents","holders":"Token Holders","price":"Token Price (Demo)","trading":"Trading Active (Demo)"},"whySucceed":{"title":"üöÄ Why HypeAI is Destined to Succeed","subtitle":"Built on real revenue, utility, and AI innovation. Our success is inevitable."},"services":{"title":"AI Services Platform","subtitle":"35+ professional AI services for crypto projects. From security audits to full-stack development."},"footer":{"tagline":"27 AI Agents. Infinite Work. YOUR Success.","rights":"All rights reserved.","builtBy":"Built by AI Agents Team","disclaimer":"Cryptocurrency investments carry risk. Do your own research.","quickLinks":"Quick Links","resources":"Resources","community":"Community","legal":"Legal"},"buttons":{"launchSoon":"üöÄ Launch Soon","meetAgents":"üë• Meet All 27 Agents","viewActivity":"üî¥ View Live Activity","buyNow":"üí∞ Buy $HYPE Now","learnMore":"Learn More","getStarted":"Get Started"}},"ru":{"nav":{"connectWallet":"–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫","home":"–ì–ª–∞–≤–Ω–∞—è","about":"–û –ø—Ä–æ–µ–∫—Ç–µ","trade":"–¢–æ—Ä–≥–æ–≤–ª—è","stake":"–°—Ç–µ–π–∫–∏–Ω–≥","governance":"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ","docs":"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è","whitepaper":"White Paper","api":"API","audit":"–ê—É–¥–∏—Ç","agents":"–ò–ò-–ö–æ–º–∞–Ω–¥–∞","analytics":"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞","blog":"–ë–ª–æ–≥","roadmap":"–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞","proof":"–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞","liveActivity":"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"},"hero":{"title":"–ì–¥–µ –ò–ò –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏","subtitle":"–£–º–Ω–µ–µ. –ë—ã—Å—Ç—Ä–µ–µ. –õ—É—á—à–µ.","cta":"–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é","launchSoon":"–°–∫–æ—Ä–æ –∑–∞–ø—É—Å–∫"},"stats":{"marketCap":"–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è","holders":"–î–µ—Ä–∂–∞—Ç–µ–ª–∏","tvl":"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å","aiAccuracy":"–¢–æ—á–Ω–æ—Å—Ç—å –ò–ò"},"whySucceed":{"title":"–ü–æ—á–µ–º—É HypeAI –æ–±—Ä–µ—á–µ–Ω –Ω–∞ —É—Å–ø–µ—Ö","subtitle":""},"services":{"title":"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤","subtitle":""},"footer":{"tagline":"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –Ω–∞ –±–∞–∑–µ –ò–ò. –ì–¥–µ –ò–ò –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.","builtBy":"–°–æ–∑–¥–∞–Ω–æ 26 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ò–ò-–∞–≥–µ–Ω—Ç–∞–º–∏","achieveFinancialFreedom":"–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã —Å –ò–ò! üöÄ","allRightsReserved":"–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã","product":"–ü—Ä–æ–¥—É–∫—Ç","resources":"–†–µ—Å—É—Ä—Å—ã","company":"–ö–æ–º–ø–∞–Ω–∏—è","legal":"–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","social":"–°–æ—Ü—Å–µ—Ç–∏","riskDisclaimer":"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö: –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π —Å–≤—è–∑–∞–Ω–∞ —Å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏. –ü—Ä–æ—à–ª—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –±—É–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–æ–º. DYOR"},"buttons":{"learnMore":"–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ","getStarted":"–ù–∞—á–∞—Ç—å","viewDetails":"–°–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏","readMore":"–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ","backToHome":"–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é","download":"–°–∫–∞—á–∞—Ç—å","submit":"–û—Ç–ø—Ä–∞–≤–∏—Ç—å","cancel":"–û—Ç–º–µ–Ω–∏—Ç—å","confirm":"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","close":"–ó–∞–∫—Ä—ã—Ç—å"}},"zh":{"nav":{"home":"È¶ñÈ°µ","trade":"‰∫§Êòì","stake":"Ë¥®Êäº","agents":"AI‰ª£ÁêÜ","docs":"ÊñáÊ°£","whitepaper":"ÁôΩÁöÆ‰π¶","connectWallet":"ËøûÊé•Èí±ÂåÖ"},"hero":{"title":"AIÈ©±Âä®ÁöÑÂä†ÂØÜË¥ßÂ∏Å‰∫§Êòì","subtitle":"Êõ¥Êô∫ËÉΩ„ÄÇÊõ¥Âø´ÈÄü„ÄÇÊõ¥‰ºòÁßÄ„ÄÇ","description":"27‰∏™AI‰ª£ÁêÜÊó†ÈôêÂ∑•‰ΩúÔºåÂä©ÂäõÊÇ®ÁöÑË¥¢Âä°Â¢ûÈïø","ctaPrimary":"Á´ãÂç≥ÂºÄÂßã‰∫§Êòì","ctaSecondary":"Êü•ÁúãAI‰ª£ÁêÜ","whySuccessButton":"üöÄ ‰∏∫‰ªÄ‰πà50ÂÄç-100ÂÄç-1000ÂÄçÂäø‰∏çÂèØÊå°"},"stats":{"agents":"AI‰ª£ÁêÜ","holders":"‰ª£Â∏ÅÊåÅÊúâËÄÖ","price":"‰ª£Â∏Å‰ª∑Ê†ºÔºàÊºîÁ§∫Ôºâ","trading":"‰∫§ÊòìÊøÄÊ¥ª‰∏≠ÔºàÊºîÁ§∫Ôºâ"},"whySucceed":{"title":"üöÄ ‰∏∫‰ªÄ‰πàHypeAIÊ≥®ÂÆöÊàêÂäü","subtitle":"Âª∫Á´ãÂú®ÁúüÂÆûÊî∂ÂÖ•„ÄÅÂÆûÁî®ÊÄßÂíåAIÂàõÊñ∞‰πã‰∏ä„ÄÇÊàë‰ª¨ÁöÑÊàêÂäüÂäø‰∏çÂèØÊå°„ÄÇ"},"services":{"title":"AIÊúçÂä°Âπ≥Âè∞","subtitle":"‰∏∫Âä†ÂØÜË¥ßÂ∏ÅÈ°πÁõÆÊèê‰æõ35+‰∏ì‰∏öAIÊúçÂä°„ÄÇ‰ªéÂÆâÂÖ®ÂÆ°ËÆ°Âà∞ÂÖ®Ê†àÂºÄÂèë„ÄÇ"},"footer":{"tagline":"27‰∏™AI‰ª£ÁêÜ„ÄÇÊó†ÈôêÂ∑•‰Ωú„ÄÇÊÇ®ÁöÑÊàêÂäü„ÄÇ","rights":"ÁâàÊùÉÊâÄÊúâ„ÄÇ","builtBy":"Áî±AI‰ª£ÁêÜÂõ¢ÈòüÊûÑÂª∫","disclaimer":"Âä†ÂØÜË¥ßÂ∏ÅÊäïËµÑÂ≠òÂú®È£éÈô©„ÄÇËØ∑Ëá™Ë°åÁ†îÁ©∂„ÄÇ","quickLinks":"Âø´ÈÄüÈìæÊé•","resources":"ËµÑÊ∫ê","community":"Á§æÂå∫","legal":"Ê≥ïÂæãÊù°Ê¨æ"},"buttons":{"launchSoon":"üöÄ Âç≥Â∞ÜÊé®Âá∫","meetAgents":"üë• ËÆ§ËØÜÂÖ®ÈÉ®27‰∏™‰ª£ÁêÜ","viewActivity":"üî¥ Êü•ÁúãÂÆûÊó∂Ê¥ªÂä®","buyNow":"üí∞ Á´ãÂç≥Ë¥≠‰π∞$HYPE","learnMore":"‰∫ÜËß£Êõ¥Â§ö","getStarted":"ÂºÄÂßã‰ΩøÁî®"}}};

    // Language Manager
    const LanguageManager = {
        currentLang: 'en',
        translations: TRANSLATIONS, // Use embedded translations
        supportedLangs: ['en', 'ru', 'zh', 'es', 'fr', 'de', 'ja', 'ko'],
        activeLangs: ['en', 'ru', 'zh'], // Currently active languages - CHINESE NOW ACTIVE!

        // Language metadata
        languageInfo: {
            en: { name: 'English', flag: 'üá∫üá∏', status: 'active', availability: 'Q1 2025' },
            ru: { name: 'Russian', flag: 'üá∑üá∫', status: 'active', availability: 'Q1 2025' },
            zh: { name: 'Chinese', flag: 'üá®üá≥', status: 'active', availability: 'Q1 2025' }, // ACTIVATED!
            es: { name: 'Spanish', flag: 'üá™üá∏', status: 'coming', availability: 'Q2 2025' },
            fr: { name: 'French', flag: 'üá´üá∑', status: 'coming', availability: 'Q3 2025' },
            de: { name: 'German', flag: 'üá©üá™', status: 'coming', availability: 'Q3 2025' },
            ja: { name: 'Japanese', flag: 'üáØüáµ', status: 'coming', availability: 'Q3 2025' },
            ko: { name: 'Korean', flag: 'üá∞üá∑', status: 'coming', availability: 'Q4 2025' }
        },

        // Initialize
        init: async function() {
            // Load translations
            await this.loadTranslations();

            // Detect and set language
            const savedLang = localStorage.getItem('hypeai_language');
            const browserLang = navigator.language.split('-')[0];

            if (savedLang && this.supportedLangs.includes(savedLang)) {
                this.currentLang = savedLang;
            } else if (this.supportedLangs.includes(browserLang)) {
                this.currentLang = browserLang;
            }

            // Apply translations
            this.applyTranslations();

            // Create language switcher UI
            this.createSwitcher();

            console.log(`üåç HypeAI Language: ${this.currentLang.toUpperCase()}`);
        },

        // Load translations (now embedded, no fetch needed)
        loadTranslations: async function() {
            // Translations are now embedded in the script to avoid CORS issues
            console.log('‚úÖ Translations loaded from embedded data');
            return Promise.resolve();
        },

        // Apply translations to page
        applyTranslations: function() {
            if (!this.translations) return;

            const lang = this.translations[this.currentLang];
            if (!lang) return;

            // Update all elements with data-i18n attribute
            document.querySelectorAll('[data-i18n]').forEach(element => {
                const key = element.getAttribute('data-i18n');
                const translation = this.getNestedTranslation(lang, key);

                if (translation) {
                    element.textContent = translation;
                }
            });

            // Update placeholders
            document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
                const key = element.getAttribute('data-i18n-placeholder');
                const translation = this.getNestedTranslation(lang, key);

                if (translation) {
                    element.placeholder = translation;
                }
            });

            // Update title attributes
            document.querySelectorAll('[data-i18n-title]').forEach(element => {
                const key = element.getAttribute('data-i18n-title');
                const translation = this.getNestedTranslation(lang, key);

                if (translation) {
                    element.title = translation;
                }
            });

            // Update HTML lang attribute
            document.documentElement.lang = this.currentLang;

            // Update page title if available
            if (lang.pageTitle) {
                document.title = lang.pageTitle;
            }
        },

        // Get nested translation by key (e.g., "hero.title")
        getNestedTranslation: function(obj, key) {
            return key.split('.').reduce((o, k) => (o || {})[k], obj);
        },

        // Switch language
        switchLanguage: function(lang) {
            if (!this.supportedLangs.includes(lang)) return;

            // Check if language is active
            if (!this.activeLangs.includes(lang)) {
                const info = this.languageInfo[lang];
                console.log(`‚è≥ ${info.name} coming ${info.availability}`);
                return;
            }

            this.currentLang = lang;
            localStorage.setItem('hypeai_language', lang);

            // Apply new translations
            this.applyTranslations();

            // Update switcher UI
            this.updateSwitcherUI();

            // Close dropdown
            this.closeDropdown();

            console.log(`üåç Language switched to: ${lang.toUpperCase()}`);

            // Dispatch custom event
            window.dispatchEvent(new CustomEvent('languageChanged', { detail: { lang } }));
        },

        // Create language switcher UI with dropdown
        createSwitcher: function() {
            // Check if nav exists
            const nav = document.querySelector('nav');
            if (!nav) {
                console.warn('Navigation not found, cannot create language switcher');
                return;
            }

            // Create switcher container
            const switcherContainer = document.createElement('div');
            switcherContainer.className = 'language-switcher-dropdown';

            // Create dropdown button
            const dropdownBtn = document.createElement('button');
            dropdownBtn.className = 'lang-dropdown-btn';

            const currentInfo = this.languageInfo[this.currentLang];
            dropdownBtn.innerHTML = `
                <span class="lang-current-flag">${currentInfo.flag}</span>
                <span class="lang-current-name">${currentInfo.name}</span>
                <svg class="lang-dropdown-arrow" width="12" height="8" viewBox="0 0 12 8" fill="none">
                    <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            `;

            // Create dropdown menu
            const dropdownMenu = document.createElement('div');
            dropdownMenu.className = 'lang-dropdown-menu';

            // Add all languages to dropdown
            this.supportedLangs.forEach(lang => {
                const info = this.languageInfo[lang];
                const langItem = document.createElement('button');
                langItem.className = 'lang-dropdown-item';
                langItem.setAttribute('data-lang', lang);

                if (info.status === 'coming') {
                    langItem.classList.add('lang-coming-soon');
                    langItem.disabled = true;
                }

                if (lang === this.currentLang) {
                    langItem.classList.add('lang-active');
                }

                langItem.innerHTML = `
                    <span class="lang-item-flag">${info.flag}</span>
                    <span class="lang-item-name">${info.name}</span>
                    ${info.status === 'coming' ? `<span class="lang-coming-badge">Coming ${info.availability}</span>` : ''}
                    ${lang === this.currentLang ? '<span class="lang-active-check">‚úì</span>' : ''}
                `;

                // Click handler for active languages
                if (info.status === 'active') {
                    langItem.addEventListener('click', () => {
                        this.switchLanguage(lang);
                    });
                }

                dropdownMenu.appendChild(langItem);
            });

            // Append elements
            switcherContainer.appendChild(dropdownBtn);
            switcherContainer.appendChild(dropdownMenu);

            // Insert at the end of nav (before wallet button which is outside nav)
            nav.appendChild(switcherContainer);

            // Toggle dropdown
            dropdownBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleDropdown();
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', () => {
                this.closeDropdown();
            });

            console.log('‚úÖ Multi-language dropdown created (8 languages)');
        },

        // Toggle dropdown
        toggleDropdown: function() {
            const dropdown = document.querySelector('.language-switcher-dropdown');
            if (!dropdown) return;

            const menu = dropdown.querySelector('.lang-dropdown-menu');
            const arrow = dropdown.querySelector('.lang-dropdown-arrow');

            if (menu.classList.contains('show')) {
                menu.classList.remove('show');
                arrow.style.transform = 'rotate(0deg)';
            } else {
                menu.classList.add('show');
                arrow.style.transform = 'rotate(180deg)';
            }
        },

        // Close dropdown
        closeDropdown: function() {
            const dropdown = document.querySelector('.language-switcher-dropdown');
            if (!dropdown) return;

            const menu = dropdown.querySelector('.lang-dropdown-menu');
            const arrow = dropdown.querySelector('.lang-dropdown-arrow');

            if (menu) {
                menu.classList.remove('show');
            }
            if (arrow) {
                arrow.style.transform = 'rotate(0deg)';
            }
        },

        // Update switcher UI to show active language
        updateSwitcherUI: function() {
            // Update dropdown button
            const dropdownBtn = document.querySelector('.lang-dropdown-btn');
            if (dropdownBtn) {
                const currentInfo = this.languageInfo[this.currentLang];
                const flagSpan = dropdownBtn.querySelector('.lang-current-flag');
                const nameSpan = dropdownBtn.querySelector('.lang-current-name');

                if (flagSpan) flagSpan.textContent = currentInfo.flag;
                if (nameSpan) nameSpan.textContent = currentInfo.name;
            }

            // Update dropdown items
            document.querySelectorAll('.lang-dropdown-item').forEach(item => {
                const itemLang = item.getAttribute('data-lang');

                if (itemLang === this.currentLang) {
                    item.classList.add('lang-active');
                    // Add checkmark if not already there
                    if (!item.querySelector('.lang-active-check')) {
                        const check = document.createElement('span');
                        check.className = 'lang-active-check';
                        check.textContent = '‚úì';
                        item.appendChild(check);
                    }
                } else {
                    item.classList.remove('lang-active');
                    // Remove checkmark
                    const check = item.querySelector('.lang-active-check');
                    if (check) check.remove();
                }
            });
        },

        // Get current language
        getCurrentLanguage: function() {
            return this.currentLang;
        },

        // Translate a key programmatically
        translate: function(key) {
            if (!this.translations) return key;
            const lang = this.translations[this.currentLang];
            return this.getNestedTranslation(lang, key) || key;
        }
    };

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => LanguageManager.init());
    } else {
        LanguageManager.init();
    }

    // Make globally accessible
    window.HypeAILanguage = LanguageManager;

    // Load external CSS
    const cssLink = document.createElement('link');
    cssLink.rel = 'stylesheet';
    // Use relative path to support both file:// and http://
    cssLink.href = './css/language-switcher.css';
    document.head.appendChild(cssLink);

})();
