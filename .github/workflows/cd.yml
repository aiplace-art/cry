name: CD Pipeline

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - testnet
          - mainnet

env:
  NODE_VERSION: '18.x'

jobs:
  deploy-contracts-testnet:
    name: Deploy Contracts to Testnet
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: testnet
      url: https://sepolia.etherscan.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Deploy to Sepolia
        env:
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          npm run deploy:testnet
          echo "SEPOLIA_CONTRACT_ADDRESS=$(cat deployments/sepolia-latest.json | jq -r '.address')" >> $GITHUB_ENV

      - name: Verify contracts on Etherscan
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: npm run verify:testnet
        continue-on-error: true

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: testnet-deployment
          path: deployments/

      - name: Create deployment summary
        run: |
          echo "## Testnet Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** Sepolia" >> $GITHUB_STEP_SUMMARY
          echo "**Contract Address:** ${{ env.SEPOLIA_CONTRACT_ADDRESS }}" >> $GITHUB_STEP_SUMMARY
          echo "**Etherscan:** https://sepolia.etherscan.io/address/${{ env.SEPOLIA_CONTRACT_ADDRESS }}" >> $GITHUB_STEP_SUMMARY

  deploy-contracts-mumbai:
    name: Deploy Contracts to Mumbai
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: mumbai
      url: https://mumbai.polygonscan.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Deploy to Mumbai
        env:
          MUMBAI_RPC_URL: ${{ secrets.MUMBAI_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        run: |
          npm run deploy:mumbai
          echo "MUMBAI_CONTRACT_ADDRESS=$(cat deployments/mumbai-latest.json | jq -r '.address')" >> $GITHUB_ENV

      - name: Verify contracts on Polygonscan
        env:
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        run: npm run verify:mumbai
        continue-on-error: true

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mumbai-deployment
          path: deployments/

  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    needs: [deploy-contracts-testnet]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production-backend
      url: https://your-app.railway.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifacts
        uses: actions/download-artifact@v3
        with:
          name: testnet-deployment
          path: deployments/

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway up --detach

      - name: Update environment variables
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          CONTRACT_ADDRESS=$(cat deployments/sepolia-latest.json | jq -r '.address')
          railway variables set CONTRACT_ADDRESS=$CONTRACT_ADDRESS
          railway variables set NODE_ENV=production

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [deploy-contracts-testnet, deploy-backend]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production-frontend
      url: https://your-app.vercel.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download deployment artifacts
        uses: actions/download-artifact@v3
        with:
          name: testnet-deployment
          path: deployments/

      - name: Update contract addresses
        run: |
          CONTRACT_ADDRESS=$(cat deployments/sepolia-latest.json | jq -r '.address')
          echo "NEXT_PUBLIC_CONTRACT_ADDRESS=$CONTRACT_ADDRESS" > .env.production

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        env:
          TESTNET_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          BACKEND_URL: https://your-app.railway.app
          FRONTEND_URL: https://your-app.vercel.app
        run: npm run test:smoke
        continue-on-error: true

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to production completed!

            Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
